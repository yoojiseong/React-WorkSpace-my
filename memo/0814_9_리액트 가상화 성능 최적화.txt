    react-virtualized
: 수천 개의 데이터가 담긴 리스트나 테이블을 렌더링할 때,
  사용자에게 보이는 부분만 렌더링하여
  웹 애플리케이션의 성능을 최적화하는 리액트 라이브러리

일반적으로 브라우저는 리스트에 10,000개의 항목이 있다면,
10,000개 전체를 DOM 요소로 만듭니다.
이는 엄청난 메모리 낭비와 렌더링 시간 지연을 유발하여
페이지가 버벅거리거나 멈추는 원인이 됩니다.

`react-virtualized`는
이 문제를 **'윈도우잉(Windowing)'** 또는
 **'가상화(Virtualization)'** 기법으로 해결합니다.
전체 리스트를 거대한 그림이라고 상상했을 때,
`react-virtualized`는
작은 창문(window)을 통해 그 그림의 일부만 보여주는 것과 같습니다.

사용자가 스크롤을 움직이면, 창문에 보이는 부분만 동적으로 DOM에 추가하고,
창문 밖으로 벗어나는 부분은 DOM에서 제거합니다.
이 덕분에 실제 DOM에는 수십 개의 요소만 존재하게 되어,
데이터의 양과 상관없이 매우 빠르고 부드러운 사용자 경험을 제공할 수 있습니다.

방법2가지.
react-virtualized`는 다양한 컴포넌트를 제공하지만,
가장 핵심적인 것은 `List`와 `AutoSizer` 입니다.

기본 문법
import { List } from 'react-virtualized';

<List
  width={width} // (필수) 리스트의 전체 너비
  height={height} // (필수) 리스트의 전체 높이
  rowCount={list.length} // (필수) 전체 항목의 개수
  rowHeight={75} // (필수) 각 행의 높이 (고정값 또는 함수)
  rowRenderer={renderer} // (필수) 각 행을 렌더링하는 함수
/>
```
rowRenderer 의 샘플 함수 .
const rowRender = useCallback(
    ({ index, key, style }) => {
      const todo = todos[index];
      return (
        <TodoListItem
          todo={todo}
          key={key}
          onRemove={onRemove}
          onToggle={onToggle}
          style={style}
        />
      );
    },
    [onRemove, onToggle, todos],
  );

  * **`width`, `height`**: `AutoSizer`를 통해 동적으로 값을 전달받습니다. 이 크기가 바로 '창문'의 크기가 됩니다.
  * **`rowCount`**: 전체 데이터 배열의 길이를 지정하여, 라이브러리가 전체 스크롤 길이를 계산할 수 있게 합니다.
  * **`rowHeight`**: 각 행의 높이를 픽셀 단위로 지정합니다. 모든 행의 높이가 같다면 고정값을, 다르다면 인덱스를 받아 높이를 반환하는 함수를 전달할 수 있습니다.
  * **`rowRenderer`**: 가장 중요한 prop입니다. 화면에 보여야 할 각 행에 대해 호출되며,